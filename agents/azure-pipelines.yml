name: 0.0.$(Rev:r)

trigger:
  batch: true
  branches:
    include:
      - main
      - bootstrap-pipeline

variables:
  - group: ado-vmss-pool
  - name: DEBIAN_FRONTEND
    value: noninteractive
  - name: TF_IN_AUTOMATION
    value: true
  - name: PROJECT
    value: ado-vmss-pool
    
stages:
  - stage: 'build'
    pool: 'ado-vmss-pool-bootstrap'
    variables:
      - name: sig_image_version
        value: 0.0.54 #$(Build.BuildNumber)
    jobs:
      - job: 
        displayName: 'Generate Agent Image'
        timeoutInMinutes: 600
        cancelTimeoutInMinutes: 30
        variables:
          agents_folder: './agents'
        steps:
          - checkout: self
            fetchDepth: 1

          - task: Bash@3
            displayName: 'Install Tools'
            inputs:
              targetType: 'inline'
              script: |
                set -euo pipefail
                
                INSTALLER_FOLDER="${AGENTS_FOLDER}/scripts/bootstrap"
                chmod -Rv 777 "${INSTALLER_FOLDER}/"
                
                declare -a SCRIPTS=(
                                    "azure-cli.sh"
                                    "basic.sh"
                                    "packer.sh"
                                    "terraform.sh"
                                    )
                
                for SCRIPT in "${SCRIPTS[@]}"
                do
                  sudo -E sh -c "${INSTALLER_FOLDER}/${SCRIPT}"
                done

          - task: AzureCLI@2
            displayName: 'Prepare Credentials'
            inputs:
              addSpnToEnvironment: true
              azureSubscription: 'Azure'
              scriptLocation: 'inlineScript'
              scriptType: 'bash'
              workingDirectory: agents/infrastructure 
              inlineScript: |
                set -euo pipefail

                echo "##vso[task.setvariable variable=AZURE_CLIENT_ID;issecret=true]${servicePrincipalId}"
                echo "##vso[task.setvariable variable=AZURE_CLIENT_SECRET;issecret=true]${servicePrincipalKey}"
                echo "##vso[task.setvariable variable=AZURE_SUBSCRIPTION_ID;issecret=true]$(az account show --query 'id' -o tsv)"
                echo "##vso[task.setvariable variable=AZURE_TENANT_ID;issecret=true]${tenantId}"
    
          - task: Bash@3
            #condition: eq(variables['sig_image_version'], variables['Build.BuildNumber'])
            displayName: 'Build Agent Image Version'
            env:
              ARM_CLIENT_ID: $(AZURE_CLIENT_ID)
              ARM_CLIENT_SECRET: $(AZURE_CLIENT_SECRET)
              ARM_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
              ARM_TENANT_ID: $(AZURE_TENANT_ID)
            inputs:
              targetType: 'inline'
              script: |
                set -euo pipefail

                echo "Show Packer Version"
                packer --version

                echo "Sanity Check"
                packer validate -syntax-only ${TEMPLATE_PATH}
                
                echo "Build VM Image"
                packer build \
                  -var "client_id=${ARM_CLIENT_ID}" \
                  -var "client_secret=${ARM_CLIENT_SECRET}" \
                  -var "managed_image_name=agent" \
                  -var "managed_image_resource_group_name=${AZURE_RESOURCE_GROUP_IMAGES}" \
                  -var "location=${AZURE_LOCATION}" \
                  -var "sig_image_version=$(Build.BuildNumber)" \
                  -var "sig_name=${SIG_NAME}" \
                  -var "subscription_id=${ARM_SUBSCRIPTION_ID}" \
                  -var "tenant_id=${ARM_TENANT_ID}" \
                  -var "virtual_network_subnet_name=${PACKER_SUBNET_NAME}" \
                  -var "virtual_network_resource_group_name=${BUILD_AGENT_VNET_RESOURCE_GROUP}" \
                  -var "virtual_network_name=${BUILD_AGENT_VNET_NAME}" \
                  ${AGENTS_FOLDER}

          - task: Bash@3
            displayName: 'Terraform Init'
            env:
              ARM_CLIENT_ID: $(AZURE_CLIENT_ID)
              ARM_CLIENT_SECRET: $(AZURE_CLIENT_SECRET)
              ARM_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
              ARM_TENANT_ID: $(AZURE_TENANT_ID)
            inputs:
              targetType: 'inline'
              workingDirectory: agents/infrastructure 
              script: |
                set -euo pipefail
                
                terraform init \
                  -input=false \
                  -backend-config="resource_group_name=${TF_STORAGE_RG}" \
                  -backend-config="storage_account_name=${TF_STORAGE_ACCOUNT}" \
                  -backend-config="container_name=${TF_STORAGE_BLOB_CONTAINER}" \
                  -backend-config="key=${PROJECT}.tfstate" 
                terraform validate
                terraform -v

          - task: Bash@3
            displayName: 'Terraform Plan'
            env:
              ARM_CLIENT_ID: $(AZURE_CLIENT_ID)
              ARM_CLIENT_SECRET: $(AZURE_CLIENT_SECRET)
              ARM_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
              ARM_TENANT_ID: $(AZURE_TENANT_ID)
            inputs:
              targetType: 'inline'
              workingDirectory: agents/infrastructure 
              script: |
                set -euo pipefail

                terraform plan \
                  -input=false \
                  -var="shared_image_version=$(sig_image_version)"
      
          - task: AzureCLI@2
            condition: always()
            displayName: 'Cleanup VMI'
            inputs:
              addSpnToEnvironment: false
              azureSubscription: 'Azure'
              scriptLocation: 'inlineScript'
              scriptType: 'bash'
              inlineScript: |
                set -euo pipefail

                AZURE_SUBSCRIPTION=$(az account show --query 'id' -o tsv)

                  az image delete \
                    --name agent \
                    --resource-group ${AZURE_RESOURCE_GROUP_IMAGES} \
                    --subscription ${AZURE_SUBSCRIPTION}

